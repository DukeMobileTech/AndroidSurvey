buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:0.6.1'
  }
}

apply plugin: 'android'
  
android {
  
  compileSdkVersion 18
  buildToolsVersion '18.1.1'
  
  defaultConfig {
    minSdkVersion 14
    targetSdkVersion 18
  }
  
  sourceSets {
    main {
      manifest.srcFile 'AndroidManifest.xml'
      java.srcDirs = ['src']
      resources.srcDirs = ['src']
      aidl.srcDirs = ['src']
      renderscript.srcDirs = ['src']
      res.srcDirs = ['res']
      assets.srcDirs = ['assets']
    }
    
    unitTest {
      java.srcDir file('test')
      resources.srcDir file('test/resources')
    }
    
    instrumentTest.setRoot('test')
  } 
  
}

sourceSets {
  unitTest {
    java.srcDir file('test')
    resources.srcDir file('test/resources')
  } 
}

configurations {
  unitTestCompile.extendsFrom runtime
  unitTestRuntime.extendsFrom unitTestCompile
}

repositories {
  mavenCentral()
}

dependencies {

    compile 'com.android.support:support-v4:19.0.0'
    compile files('libs/ActiveAndroid.jar')
    compile files('libs/commons-codec-1.8.jar')
    compile files('libs/crashlytics.jar')
     
    unitTestCompile files('libs/ActiveAndroid.jar')
    unitTestCompile files('libs/android-support-v4.jar')
    unitTestCompile files('libs/commons-codec-1.8.jar')
    unitTestCompile files('libs/crashlytics.jar')
    
    unitTestCompile files('src/')
    unitTestCompile files('gen/')
    
    //BEGIN HACK
    unitTestCompile files('build/source/buildConfig/release/')
    unitTestCompile files('build/source/r/release/')
    //END HACK
    
    unitTestCompile files('test/libs/android.jar')
    unitTestCompile files('test/libs/junit.jar')
    unitTestCompile files('test/libs/org.hamcrest.core_1.3.0.v201303031735.jar')
    unitTestCompile files('test/libs/mockito-all-1.9.5.jar')
    unitTestCompile files('test/libs/powermock-reflect-1.4.7.jar')
    unitTestCompile files('test/libs/robolectric-2.2-jar-with-dependencies.jar')
}

task unitTest(type:Test, dependsOn: assemble) {
    description = "run unit tests"
    testClassesDir = project.sourceSets.unitTest.output.classesDir
    classpath = project.sourceSets.unitTest.runtimeClasspath
}

tasks.withType(Test) {
    scanForTestClasses = false
    include "**/*Test.class"
}

unitTest {
    afterTest { desc, result ->
        println "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
}

task copyReleaseTask(type: Copy) {
    from 'RobolectricManifest.xml'
    into 'build/manifests/release'
    rename { String fileName ->
        fileName.replace('Robolectric', 'Android')
    }
}

task copyDebugTask(type: Copy) {
    from 'RobolectricManifest.xml'
    into 'build/manifests/debug'
    rename { String fileName ->
        fileName.replace('Robolectric', 'Android')
    }
}

assemble.dependsOn copyReleaseTask
assemble.dependsOn copyDebugTask
check.dependsOn unitTest
